apply:
  type: invoke
call:
  type: invoke
concat:
  type: invoke
indexOf:
  type: invoke
join:
  type: invoke
lastIndexOf:
  type: invoke
pop:
  type: invoke
push:
  type: invoke
reverse:
  type: invoke
shift:
  type: invoke
slice:
  type: invoke
splice:
  type: invoke
sort:
  type: invoke
toString:
  type: invoke
string:
  type: invoke
  property: toString
toLocaleString:
  type: invoke
unshift:
  type: invoke
charAt:
  type: invoke
charCodeAt:
  type: invoke
match:
  type: invoke
replace:
  type: invoke
search:
  type: invoke
split:
  type: invoke
substr:
  type: invoke
substring:
  type: invoke
toLocaleLowerCase:
  type: invoke
toLocaleUpperCase:
  type: invoke
toLowerCase:
  type: invoke
toUpperCase:
  type: invoke
trim:
  type: invoke
valueOf:
  type: invoke
debug:
  type: qualify
  object: console
assert:
  type: qualify
  object: console
trace:
  type: qualify
  object: console
warn:
  type: qualify
  object: console
E:
  type: qualify
  object: Math
PI:
  type: qualify
  object: Math
SQRT2:
  type: qualify
  object: Math
SQRT1_2:
  type: qualify
  object: Math
LN2:
  type: qualify
  object: Math
LN10:
  type: qualify
  object: Math
LOG2E:
  type: qualify
  object: Math
LOG10E:
  type: qualify
  object: Math
abs:
  type: qualify
  object: Math
acos:
  type: qualify
  object: Math
asin:
  type: qualify
  object: Math
atan:
  type: qualify
  object: Math
atan2:
  type: qualify
  object: Math
ceil:
  type: qualify
  object: Math
cos:
  type: qualify
  object: Math
exp:
  type: qualify
  object: Math
floor:
  type: qualify
  object: Math
log:
  type: qualify
  object: Math
mmin:
  type: qualify
  object: Math
  property: min
mmax:
  type: qualify
  object: Math
  property: max
pow:
  type: qualify
  object: Math
random:
  type: qualify
  object: Math
round:
  type: qualify
  object: Math
sin:
  type: qualify
  object: Math
sqrt:
  type: qualify
  object: Math
tan:
  type: qualify
  object: Math
forEach:
  type: qualify
  object: _
map:
  type: qualify
  object: _
reduce:
  type: qualify
  object: _
reduceRight:
  type: qualify
  object: _
find:
  type: qualify
  object: _
filter:
  type: qualify
  object: _
where:
  type: qualify
  object: _
findWhere:
  type: qualify
  object: _
reject:
  type: qualify
  object: _
every:
  type: qualify
  object: _
some:
  type: qualify
  object: _
contains:
  type: qualify
  object: _
invoke:
  type: qualify
  object: _
pluck:
  type: qualify
  object: _
maxBy:
  type: qualify
  object: _
  property: max
minBy:
  type: qualify
  object: _
  property: min
sortBy:
  type: qualify
  object: _
groupBy:
  type: qualify
  object: _
indexBy:
  type: qualify
  object: _
countBy:
  type: qualify
  object: _
shuffle:
  type: qualify
  object: _
sample:
  type: qualify
  object: _
toArray:
  type: qualify
  object: _
sizeOf:
  type: qualify
  object: _
partition:
  type: qualify
  object: _
head:
  type: qualify
  object: _
initial:
  type: qualify
  object: _
last:
  type: qualify
  object: _
tail:
  type: qualify
  object: _
compact:
  type: qualify
  object: _
flatten:
  type: qualify
  object: _
without:
  type: qualify
  object: _
union:
  type: qualify
  object: _
intersection:
  type: qualify
  object: _
difference:
  type: qualify
  object: _
unique:
  type: qualify
  object: _
zip:
  type: qualify
  object: _
toObject:
  type: qualify
  object: _
  property: object
indexOf:
  type: qualify
  object: _
lastIndexOf:
  type: qualify
  object: _
sortedIndex:
  type: qualify
  object: _
sequence:
  type: qualify
  object: _
  property: range
bind:
  type: qualify
  object: _
bindAll:
  type: qualify
  object: _
partial:
  type: qualify
  object: _
memoize:
  type: qualify
  object: _
delay:
  type: qualify
  object: _
defer:
  type: qualify
  object: _
throttle:
  type: qualify
  object: _
debounce:
  type: qualify
  object: _
once:
  type: qualify
  object: _
after:
  type: qualify
  object: _
before:
  type: qualify
  object: _
wrap:
  type: qualify
  object: _
negate:
  type: qualify
  object: _
compose:
  type: qualify
  object: _
keys:
  type: qualify
  object: _
vvalues:
  type: qualify
  object: _
pairs:
  type: qualify
  object: _
invert:
  type: qualify
  object: _
functions:
  type: qualify
  object: _
extend:
  type: qualify
  object: _
pick:
  type: qualify
  object: _
omit:
  type: qualify
  object: _
defaults:
  type: qualify
  object: _
clone:
  type: qualify
  object: _
tap:
  type: qualify
  object: _
has:
  type: qualify
  object: _
matches:
  type: qualify
  object: _
isEqual:
  type: qualify
  object: _
isEmpty:
  type: qualify
  object: _
isElement:
  type: qualify
  object: _
isArray:
  type: qualify
  object: _
isObject:
  type: qualify
  object: _
isArguments:
  type: qualify
  object: _
isFunction:
  type: qualify
  object: _
isString:
  type: qualify
  object: _
isNumber:
  type: qualify
  object: _
isFinite:
  type: qualify
  object: _
isBoolean:
  type: qualify
  object: _
isDate:
  type: qualify
  object: _
isRegExp:
  type: qualify
  object: _
isNaN:
  type: qualify
  object: _
isNull:
  type: qualify
  object: _
isUndefined:
  type: qualify
  object: _
identity:
  type: qualify
  object: _
constant:
  type: qualify
  object: _
noop:
  type: qualify
  object: _
times:
  type: qualify
  object: _
random:
  type: qualify
  object: _
iteratee:
  type: qualify
  object: _
uniqueId:
  type: qualify
  object: _
escape:
  type: qualify
  object: _
unescape:
  type: qualify
  object: _
now:
  type: qualify
  object: _
